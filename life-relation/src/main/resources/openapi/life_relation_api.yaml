openapi: 3.0.3
info:
  title: Relation API
  description: Relation API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api/v1'
tags:
  - name: persons
    description: Person api
  - name: relationships
    description: Relationship api

paths:
  /persons/{id}:
    get:
      operationId: getPersonByUserId
      summary: Get a person by user id
      tags:
        - persons
      parameters:
        - in: path
          name: id
          description: user id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/getPersonResponseBody'

    put:
      operationId: updatePerson
      summary: Updates a person
      tags:
        - persons
      parameters:
        - in: path
          name: id
          description: person id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/PersonUpdateRequestBody'
      responses:
        '200':
          description: Successful Operation

  /persons/relationships:
    post:
      operationId: requestRelationship
      summary: Requesting relationship to another person
      tags:
        - relationships
      requestBody:
        $ref: '#/components/requestBodies/RelationshipRequestBody'
      responses:
        '200':
          description: Successful Operation

  /persons/relationships/{relationshipId}:
    put:
      operationId: acceptRelationship
      summary: Accepting relationship
      tags:
        - relationships
      parameters:
        - in: path
          name: relationshipId
          description: relationship id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful Operation

  /persons/{personId}/relationships:
    get:
      operationId: searchRelationship
      summary: Search relationship of a person
      tags:
        - relationships
      parameters:
        - in: path
          name: personId
          description: person id
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: firstName
          required: false
          schema:
            type: string
        - in: query
          name: lastName
          required: false
          schema:
            type: string
        - in: query
          name: statuses
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationshipStatus'
        - in: query
          name: relationtypes
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/RelationType'
        - in: query
          name: relationVisibilities
          required: false
          schema:
            type: array
            items:
              $ref: '#/components/schemas/PersonDataVisibility'
        - in: query
          name: pageNumber
          required: true
          schema:
            type: integer
        - in: query
          name: pageSize
          required: true
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/searchRelationshipResponseBody'

components:
  schemas:
    PersonApiBean:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        identity:
          $ref: '#/components/schemas/PersonIdentityApiBean'
        address:
          $ref: '#/components/schemas/PersonAddressApiBean'
        contact:
          $ref: '#/components/schemas/PersonContactApiBean'
        auditData:
          $ref: '#/components/schemas/AuditData'

    PersonUpdateRequestApiBean:
      type: object
      properties:
        identity:
          $ref: '#/components/schemas/PersonIdentityApiBean'
        address:
          $ref: '#/components/schemas/PersonAddressApiBean'
        contact:
          $ref: '#/components/schemas/PersonContactApiBean'

    PersonIdentityApiBean:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        identityVisibility:
          $ref: '#/components/schemas/PersonDataVisibility'

    PersonAddressApiBean:
      type: object
      properties:
        houseNumber:
          type: integer
          format: int64
        streetName:
          type: string
        locality:
          $ref: './locality.yaml#/components/schemas/LocalityEnum'
        addressVisibility:
          $ref: '#/components/schemas/PersonDataVisibility'

    PersonContactApiBean:
      type: object
      properties:
        emailAddress:
          type: string
        mobileNumber:
          type: string
        homeNumber:
          type: string
        contactVisibility:
          $ref: '#/components/schemas/PersonDataVisibility'

    PersonDataVisibility:
      type: string
      enum: [ STRANGER, FRIEND, FAMILY, NONE, ALL ]

    RelationshipRequestApiBean:
      type: object
      properties:
        requesterPersonId:
          type: string
          format: uuid
        receiverPersonId:
          type: string
          format: uuid
        relationType:
          $ref: '#/components/schemas/RelationType'

    SearchRelationshipsApiBean:
      type: object
      properties:
        relationships:
          type: array
          items:
            $ref: '#/components/schemas/RelationshipApiBean'
        pageSize:
          type: integer
        pageNumber:
          type: integer
        totalElements:
          type: integer
          format: int64

    RelationshipApiBean:
      type: object
      properties:
        requesterPerson:
          $ref: '#/components/schemas/RelationshipPersonApiBean'
        status:
          $ref: "#/components/schemas/RelationshipStatus"
        relationtype:
          $ref: "#/components/schemas/PersonDataVisibility"
        auditData:
          $ref: '#/components/schemas/AuditData'

    RelationshipPersonApiBean:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        relationVisibility:
          $ref: '#/components/schemas/PersonDataVisibility'
    RelationType:
      type: string
      enum: [ STRANGER, FRIEND, FAMILY ]

    RelationshipStatus:
      type: string
      enum: [ PENDING, ACTIVE ]

    AuditData:
      type: object
      properties:
        createdDate:
          type: string
          format: local-date-time
        createdBy:
          type: string
        lastModifiedDate:
          type: string
          format: local-date-time
        lastModifiedBy:
          type: string

  requestBodies:
    PersonUpdateRequestBody:
      description: A Json object containing person information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PersonUpdateRequestApiBean'

    RelationshipRequestBody:
      description: A Json object containing relationship request information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RelationshipRequestApiBean'

  responses:
    getPersonResponseBody:
      description: A Json object containing person information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PersonApiBean'

    searchRelationshipResponseBody:
      description: A Json object containing relationship information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchRelationshipsApiBean'
