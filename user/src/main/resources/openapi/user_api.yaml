openapi: 3.0.3
info:
  title: User API
  description: User API
  version: 1.0.0
servers:
  - url: 'http://localhost:8080/api/v1'
tags:
  - name: users
    description: User api

paths:
  /users:
    get:
      operationId: getUsers
      summary: Search for a user with a prefix in its name
      tags:
        - users
      parameters:
        - in: query
          name: namePrefix
          required: false
          schema:
            type: string
        - in: query
          name: id
          required: false
          schema:
            type: string
            format: uuid
        - in: query
          name: page
          required: true
          schema:
            type: integer
        - in: query
          name: size
          required: true
          schema:
            type: integer
        - in: query
          name: sort
          required: false
          schema:
            type: string
        - in: query
          name: order
          required: false
          schema:
            $ref: '#/components/schemas/Order'
      responses:
        '200':
          $ref: '#/components/responses/UsersResponseBody'

  /users/{userId}:
    get:
      operationId: getUserById
      summary: Get User by ID
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          $ref: '#/components/responses/UserResponseBody'

    put:
      operationId: updateUser
      summary: Update a user
      tags:
        - users
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateRequestBody'
      responses:
        '200':
          description: Successful Operation

components:
  schemas:
    UserUpdateRequestApiBean:
      type: object
      properties:
        userName:
          type: string
        email:
          type: string

    UserApiBean:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userName:
          type: string
        email:
          type: string
        role:
          type: string

    UserPageApiBean:
      description: User Page Model
      type: object
      properties:
        totalElements:
          type: integer
        totalPages:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserApiBean'

    Order:
      description: Order enums
      type: string
      enum: [ ASC, DESC ]
  requestBodies:
    UserUpdateRequestBody:
      description: A Json object containing user information
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUpdateRequestApiBean'

  responses:
    UserResponseBody:
      description: A Json object containing user information
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserApiBean'

    UsersResponseBody:
      description: A Json object containing users by page
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPageApiBean'
